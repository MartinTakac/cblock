pipeline {
    agent none
    post {
        failure {
            updateGitlabCommitStatus name: 'build', state: 'failed'
            slackSend color: 'danger', channel: '#cogarch-tests', message: "${env.JOB_NAME} #${env.BUILD_NUMBER} failure"
        }
        unstable {
            updateGitlabCommitStatus name: 'build', state: 'failed'
            slackSend color: 'warning', channel: '#cogarch-tests', message: "${env.JOB_NAME} #${env.BUILD_NUMBER} test failure"
        }
        success {
            updateGitlabCommitStatus name: 'build', state: 'success'
            slackSend color: 'good', channel: '#cogarch-tests', message: "${env.JOB_NAME} #${env.BUILD_NUMBER} successful"
        }
    }
    options {
      gitLabConnection('jenkins-gitlab-integration-test')
    }
    stages {
        stage ("Parallel Build and Test") {
            steps {
                parallel (
                    "MacBuild": {
                        node ('mac') {                            
                            echo 'Building and testing model on Mac'                            
                            checkout([$class: 'GitSCM',
                                branches: [[name: "master"]],
                                extensions: [[$class: 'WipeWorkspace']],
                                userRemoteConfigs: [[url: 'git@gitlab.soulmachines.com:cogarch/cblock.git',
                                credentialsId: '1f7b3cce-7810-4686-9e97-430faa47b984']]
                            ])
                            // Defaults to last stable or unstable build (i.e. it's ok if a test or two failed on it.)                            
                            copyArtifacts(projectName: 'SM_Trunk_Deployment', filter: 'BL_MODEL_TESTS/**',
                                selector: lastSuccessful());
                            // Linking for different OSes is done within the cmakelists files
                            sh 'chmod +x build_mac.sh'
                            sh "./build_mac.sh -D SM_HOME:STRING=${env.WORKSPACE}/BL_MODEL_TESTS"                            
                            sh "python ${env.WORKSPACE}/BL_MODEL_TESTS/run_tests.py"
                            // Note that this directory gets made in the root, not in the script dir
                            junit 'gtest-xml/*.xml'
                        }
                    },                    
                    "LinuxBuild": {
                        node ('linux') {                            
                            echo 'Building and testing model on Linux'
                            checkout([$class: 'GitSCM',
                                branches: [[name: "master"]],
                                extensions: [[$class: 'WipeWorkspace']],
                                userRemoteConfigs: [[url: 'git@gitlab.soulmachines.com:cogarch/cblock.git',
                                credentialsId: '1f7b3cce-7810-4686-9e97-430faa47b984']]
                            ])
                            // Defaults to last stable build                            
                            copyArtifacts(projectName: 'SM_Trunk_Deployment', filter: 'BL_MODEL_TESTS/**',
                                selector: lastSuccessful());                            
                            sh 'chmod +x build_linux.sh'
                            sh "./build_linux.sh -D SM_HOME:STRING=${env.WORKSPACE}/BL_MODEL_TESTS"                            
                            sh "python ${env.WORKSPACE}/BL_MODEL_TESTS/run_tests.py"
                            // Note that this directory gets made in the root, not in the script dir
                            junit 'gtest-xml/*.xml'
                        }
                    },
                    "WindowsBuild": {
                        node ('windows') {                            
                            echo 'Building and testing model on Windows'
                            checkout([$class: 'GitSCM',
                                branches: [[name: "master"]],
                                extensions: [[$class: 'WipeWorkspace']],
                                userRemoteConfigs: [[url: 'git@gitlab.soulmachines.com:cogarch/cblock.git',
                                credentialsId: '1f7b3cce-7810-4686-9e97-430faa47b984']]
                            ])
                            // Defaults to last stable build                            
                            copyArtifacts(projectName: 'SM_Trunk_Deployment', filter: 'BL_MODEL_TESTS/**',
                                selector: lastSuccessful());                            
                            bat "build_windows_vs2017.bat -D SM_HOME:STRING=${env.WORKSPACE}/BL_MODEL_TESTS"
                            bat "python ${env.WORKSPACE}/BL_MODEL_TESTS/run_tests.py"
                            // Note that this directory gets made in the root, not in the script dir
                            junit 'gtest-xml/*.xml'
                        }
                    }
                )
            }
        }
    }
}